{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shahab Siddique\\\\Desktop\\\\Doctro App\\\\doctro\\\\src\\\\pages\\\\AmbulanceDetailsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport './AmbulanceDetailsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AmbulanceDetailsPage = () => {\n  _s();\n  const {\n    ambulanceId\n  } = useParams();\n  const ambulance = ambulanceData.find(a => a.id === parseInt(ambulanceId));\n  const [bookingSuccess, setBookingSuccess] = useState(false);\n  const [showMap, setShowMap] = useState(false); // Added showMap state\n  const [destination, setDestination] = useState(null);\n  const mapRef = useRef(null); // Ref for the map container\n\n  // Step 1: Load Google Maps API script\n  useEffect(() => {\n    if (window.google) {\n      initMap();\n      return;\n    }\n    const loadGoogleMaps = () => {\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap`; // Use your actual API key here\n      script.async = true;\n      script.defer = true;\n      script.onload = () => initMap(); // Initialize map once the script loads\n      script.onerror = error => console.error('Google Maps script failed to load:', error);\n      document.body.appendChild(script);\n    };\n    loadGoogleMaps(); // Load the script when the component mounts\n\n    // Cleanup: Remove the script from the body when the component unmounts\n    return () => {\n      const script = document.querySelector(`script[src^=\"https://maps.googleapis.com/maps/api/js?key=\"]`);\n      if (script) {\n        script.remove();\n      }\n    };\n  }, []);\n  const initMap = () => {\n    if (!window.google) {\n      console.error('Google Maps API not loaded');\n      return;\n    }\n\n    // Create a new Google Map\n    const map = new google.maps.Map(mapRef.current, {\n      center: {\n        lat: ambulance.location.lat,\n        lng: ambulance.location.lng\n      },\n      // Use ambulance's location\n      zoom: 12\n    });\n\n    // Create a marker for the ambulance\n    const ambulanceStart = new google.maps.LatLng(ambulance.location.lat, ambulance.location.lng);\n    const ambulanceMarker = new google.maps.Marker({\n      position: ambulanceStart,\n      map: map,\n      title: 'Ambulance Location',\n      icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n    });\n\n    // If destination is set, create a route\n    if (destination) {\n      const directionsService = new google.maps.DirectionsService();\n      const directionsRenderer = new google.maps.DirectionsRenderer();\n      directionsRenderer.setMap(map);\n      const destinationLatLng = new google.maps.LatLng(destination.lat, destination.lng);\n\n      // Request directions to destination\n      directionsService.route({\n        origin: ambulanceStart,\n        destination: destinationLatLng,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          directionsRenderer.setDirections(result);\n        } else {\n          console.error('Directions request failed:', status);\n        }\n      });\n    }\n  };\n  const handleBookingSubmit = e => {\n    e.preventDefault();\n    setBookingSuccess(true);\n    setTimeout(() => {\n      setBookingSuccess(false);\n    }, 3000); // Show success message for 3 seconds\n  };\n  const handleTrackButtonClick = () => {\n    setDestination({\n      lat: 12.9716,\n      lng: 77.6356\n    }); // Example destination coordinates\n    setShowMap(true); // Show map when \"Track Ambulance\" button is clicked\n  };\n  if (!ambulance) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ambulance not found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ambulance-details-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"ambulance-name\",\n      children: ambulance.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ambulance-images\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: ambulance.image1,\n        alt: `${ambulance.name} view 1`,\n        className: \"ambulance-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: ambulance.image2,\n        alt: `${ambulance.name} view 2`,\n        className: \"ambulance-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"ambulance-contact\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Contact:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), \" \", ambulance.contact]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"ambulance-location\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Location:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), \" \", ambulance.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-heading\",\n      children: \"Facilities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"ambulance-facilities\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"24/7 Availability\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Emergency Medical Assistance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Equipped with Oxygen Cylinders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"First Aid Kits\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Basic and Advanced Life Support\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-heading\",\n      children: \"Book Ambulance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"booking-form\",\n      onSubmit: handleBookingSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Contact:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"track-location-button\",\n        onClick: handleTrackButtonClick // Trigger map and marker movement\n        ,\n        children: \"Track Ambulance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), showMap && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Ambulance Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        className: \"map-container\",\n        style: {\n          width: '100%',\n          height: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), bookingSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert\",\n      children: \"Ambulance service request submitted!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(AmbulanceDetailsPage, \"z9Jq6xv89j0CD7diN4VpbcPEOOE=\", false, function () {\n  return [useParams];\n});\n_c = AmbulanceDetailsPage;\nexport default AmbulanceDetailsPage;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { ambulanceData } from './Ambulancedata';\n// import './AmbulanceDetailsPage.css';\n\n// const AmbulanceDetailsPage = () => {\n//   const { ambulanceId } = useParams();\n//   const ambulance = ambulanceData.find((a) => a.id === parseInt(ambulanceId));\n//   const [bookingSuccess, setBookingSuccess] = useState(false);\n//   const [showMap, setShowMap] = useState(false);\n//   const [destination, setDestination] = useState(null); // Store destination address\n//   const mapRef = useRef(null); // Reference to the map element\n\n//   useEffect(() => {\n//     if (showMap && destination) {\n//       initMap();\n//     }\n//   }, [showMap, destination]);\n\n//   const initMap = () => {\n//     const directionsService = new google.maps.DirectionsService();\n//     const directionsRenderer = new google.maps.DirectionsRenderer();\n\n//     // Map initialization\n//     const map = new google.maps.Map(mapRef.current, {\n//       center: { lat: 12.9716, lng: 77.5946 }, // Default to Bangalore, change as needed\n//       zoom: 12,\n//     });\n//     directionsRenderer.setMap(map);\n\n//     // Dummy ambulance starting location\n//     const ambulanceStart = new google.maps.LatLng(12.9716, 77.5946);\n\n//     // Destination location based on user input (from form)\n//     const destinationLatLng = new google.maps.LatLng(destination.lat, destination.lng);\n\n//     // Create marker for ambulance location\n//     const ambulanceMarker = new google.maps.Marker({\n//       position: ambulanceStart,\n//       map: map,\n//       title: 'Ambulance Location',\n//       icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png', // Change this to any icon URL\n//     });\n\n//     // Request directions to the destination\n//     directionsService.route(\n//       {\n//         origin: ambulanceStart,\n//         destination: destinationLatLng,\n//         travelMode: google.maps.TravelMode.DRIVING,\n//       },\n//       (result, status) => {\n//         if (status === google.maps.DirectionsStatus.OK) {\n//           directionsRenderer.setDirections(result);\n//         } else {\n//           alert('Directions request failed due to ' + status);\n//         }\n//       }\n//     );\n\n//     // Simulate ambulance moving (use some interval here)\n//     let currentPosition = ambulanceStart;\n//     let interval = setInterval(() => {\n//       if (currentPosition.lat() < destinationLatLng.lat()) {\n//         currentPosition = new google.maps.LatLng(\n//           currentPosition.lat() + 0.0001,\n//           currentPosition.lng()\n//         );\n//         ambulanceMarker.setPosition(currentPosition);\n//       } else {\n//         clearInterval(interval); // Stop moving once the destination is reached\n//       }\n//     }, 1000); // Update position every second\n//   };\n\n//   const handleBookingSubmit = (e) => {\n//     e.preventDefault();\n//     setBookingSuccess(true);\n//     setTimeout(() => {\n//       setBookingSuccess(false);\n//     }, 3000); // Show alert for 3 seconds\n//   };\n\n//   const handleTrackButtonClick = () => {\n//     // Simulating destination from user input (this could come from form fields)\n//     setDestination({ lat: 12.9716, lng: 77.6356 }); // Example coordinates for destination\n//     setShowMap(true); // Show map on track button click\n//   };\n\n//   if (!ambulance) {\n//     return <h1>Ambulance not found!</h1>;\n//   }\n\n//   return (\n//     <div className=\"ambulance-details-page\">\n//       <h1 className=\"ambulance-name\">{ambulance.name}</h1>\n\n//       {/* Ambulance Images */}\n//       <div className=\"ambulance-images\">\n//         <img\n//           src={ambulance.image1}\n//           alt={`${ambulance.name} view 1`}\n//           className=\"ambulance-image\"\n//         />\n//         <img\n//           src={ambulance.image2}\n//           alt={`${ambulance.name} view 2`}\n//           className=\"ambulance-image\"\n//         />\n//       </div>\n\n//       {/* Ambulance Info */}\n//       <p className=\"ambulance-contact\">\n//         <strong>Contact:</strong> {ambulance.contact}\n//       </p>\n//       <p className=\"ambulance-location\">\n//         <strong>Location:</strong> {ambulance.location}\n//       </p>\n\n//       <h2 className=\"section-heading\">Facilities</h2>\n//       <ul className=\"ambulance-facilities\">\n//         <li>24/7 Availability</li>\n//         <li>Emergency Medical Assistance</li>\n//         <li>Equipped with Oxygen Cylinders</li>\n//         <li>First Aid Kits</li>\n//         <li>Basic and Advanced Life Support</li>\n//       </ul>\n\n//       {/* Booking Form */}\n//       <h2 className=\"section-heading\">Book Ambulance</h2>\n//       <form\n//         className=\"booking-form\"\n//         onSubmit={handleBookingSubmit}\n//       >\n//         <label>\n//           Name:\n//           <input type=\"text\" required />\n//         </label>\n//         <label>\n//           Contact:\n//           <input type=\"text\" required />\n//         </label>\n//         <label>\n//           Address:\n//           <input type=\"text\" required />\n//         </label>\n//         <button type=\"submit\">Submit</button>\n\n//         {/* Track Ambulance Location Button */}\n//         <button\n//           type=\"button\"\n//           className=\"track-location-button\"\n//           onClick={handleTrackButtonClick} // Trigger map and marker movement\n//         >\n//           Track Ambulance\n//         </button>\n//       </form>\n\n//       {/* Map Preview */}\n//       {showMap && (\n//         <div className=\"map-preview\">\n//           <h3>Ambulance Location</h3>\n//           <div ref={mapRef} className=\"map-container\" style={{ width: '100%', height: '300px' }}></div>\n//         </div>\n//       )}\n\n//       {/* Success Alert */}\n//       {bookingSuccess && (\n//         <div className=\"alert\">Ambulance service request submitted!</div>\n//       )}\n//     </div>\n//   );z\n// };\n\n// export default AmbulanceDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"AmbulanceDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","jsxDEV","_jsxDEV","AmbulanceDetailsPage","_s","ambulanceId","ambulance","ambulanceData","find","a","id","parseInt","bookingSuccess","setBookingSuccess","showMap","setShowMap","destination","setDestination","mapRef","window","google","initMap","loadGoogleMaps","script","document","createElement","src","async","defer","onload","onerror","error","console","body","appendChild","querySelector","remove","map","maps","Map","current","center","lat","location","lng","zoom","ambulanceStart","LatLng","ambulanceMarker","Marker","position","title","icon","directionsService","DirectionsService","directionsRenderer","DirectionsRenderer","setMap","destinationLatLng","route","origin","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setDirections","handleBookingSubmit","e","preventDefault","setTimeout","handleTrackButtonClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","image1","alt","image2","contact","onSubmit","type","required","onClick","ref","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Shahab Siddique/Desktop/Doctro App/doctro/src/pages/AmbulanceDetailsPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './AmbulanceDetailsPage.css';\r\n\r\nconst AmbulanceDetailsPage = () => {\r\n  const { ambulanceId } = useParams();\r\n  const ambulance = ambulanceData.find((a) => a.id === parseInt(ambulanceId));\r\n  const [bookingSuccess, setBookingSuccess] = useState(false);\r\n  const [showMap, setShowMap] = useState(false); // Added showMap state\r\n  const [destination, setDestination] = useState(null);\r\n  const mapRef = useRef(null); // Ref for the map container\r\n\r\n  // Step 1: Load Google Maps API script\r\n  useEffect(() => {\r\n    if (window.google) {\r\n      initMap();\r\n      return;\r\n    }\r\n\r\n    const loadGoogleMaps = () => {\r\n      const script = document.createElement(\"script\");\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap`; // Use your actual API key here\r\n      script.async = true;\r\n      script.defer = true;\r\n      script.onload = () => initMap(); // Initialize map once the script loads\r\n      script.onerror = (error) => console.error('Google Maps script failed to load:', error);\r\n      document.body.appendChild(script);\r\n    };\r\n\r\n    loadGoogleMaps(); // Load the script when the component mounts\r\n\r\n    // Cleanup: Remove the script from the body when the component unmounts\r\n    return () => {\r\n      const script = document.querySelector(`script[src^=\"https://maps.googleapis.com/maps/api/js?key=\"]`);\r\n      if (script) {\r\n        script.remove();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const initMap = () => {\r\n    if (!window.google) {\r\n      console.error('Google Maps API not loaded');\r\n      return;\r\n    }\r\n\r\n    // Create a new Google Map\r\n    const map = new google.maps.Map(mapRef.current, {\r\n      center: { lat: ambulance.location.lat, lng: ambulance.location.lng }, // Use ambulance's location\r\n      zoom: 12,\r\n    });\r\n\r\n    // Create a marker for the ambulance\r\n    const ambulanceStart = new google.maps.LatLng(ambulance.location.lat, ambulance.location.lng);\r\n    const ambulanceMarker = new google.maps.Marker({\r\n      position: ambulanceStart,\r\n      map: map,\r\n      title: 'Ambulance Location',\r\n      icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',\r\n    });\r\n\r\n    // If destination is set, create a route\r\n    if (destination) {\r\n      const directionsService = new google.maps.DirectionsService();\r\n      const directionsRenderer = new google.maps.DirectionsRenderer();\r\n      directionsRenderer.setMap(map);\r\n\r\n      const destinationLatLng = new google.maps.LatLng(destination.lat, destination.lng);\r\n\r\n      // Request directions to destination\r\n      directionsService.route(\r\n        {\r\n          origin: ambulanceStart,\r\n          destination: destinationLatLng,\r\n          travelMode: google.maps.TravelMode.DRIVING,\r\n        },\r\n        (result, status) => {\r\n          if (status === google.maps.DirectionsStatus.OK) {\r\n            directionsRenderer.setDirections(result);\r\n          } else {\r\n            console.error('Directions request failed:', status);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleBookingSubmit = (e) => {\r\n    e.preventDefault();\r\n    setBookingSuccess(true);\r\n    setTimeout(() => {\r\n      setBookingSuccess(false);\r\n    }, 3000); // Show success message for 3 seconds\r\n  };\r\n\r\n  const handleTrackButtonClick = () => {\r\n    setDestination({ lat: 12.9716, lng: 77.6356 }); // Example destination coordinates\r\n    setShowMap(true); // Show map when \"Track Ambulance\" button is clicked\r\n  };\r\n\r\n  if (!ambulance) {\r\n    return <h1>Ambulance not found!</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"ambulance-details-page\">\r\n      <h1 className=\"ambulance-name\">{ambulance.name}</h1>\r\n\r\n      <div className=\"ambulance-images\">\r\n        <img src={ambulance.image1} alt={`${ambulance.name} view 1`} className=\"ambulance-image\" />\r\n        <img src={ambulance.image2} alt={`${ambulance.name} view 2`} className=\"ambulance-image\" />\r\n      </div>\r\n\r\n      <p className=\"ambulance-contact\">\r\n        <strong>Contact:</strong> {ambulance.contact}\r\n      </p>\r\n      <p className=\"ambulance-location\">\r\n        <strong>Location:</strong> {ambulance.location}\r\n      </p>\r\n\r\n      <h2 className=\"section-heading\">Facilities</h2>\r\n      <ul className=\"ambulance-facilities\">\r\n        <li>24/7 Availability</li>\r\n        <li>Emergency Medical Assistance</li>\r\n        <li>Equipped with Oxygen Cylinders</li>\r\n        <li>First Aid Kits</li>\r\n        <li>Basic and Advanced Life Support</li>\r\n      </ul>\r\n\r\n      <h2 className=\"section-heading\">Book Ambulance</h2>\r\n      <form className=\"booking-form\" onSubmit={handleBookingSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" required />\r\n        </label>\r\n        <label>\r\n          Contact:\r\n          <input type=\"text\" required />\r\n        </label>\r\n        <label>\r\n          Address:\r\n          <input type=\"text\" required />\r\n        </label>\r\n        <button type=\"submit\">Submit</button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"track-location-button\"\r\n          onClick={handleTrackButtonClick} // Trigger map and marker movement\r\n        >\r\n          Track Ambulance\r\n        </button>\r\n      </form>\r\n\r\n      {showMap && (\r\n        <div className=\"map-preview\">\r\n          <h3>Ambulance Location</h3>\r\n          <div ref={mapRef} className=\"map-container\" style={{ width: '100%', height: '300px' }}></div>\r\n        </div>\r\n      )}\r\n\r\n      {bookingSuccess && <div className=\"alert\">Ambulance service request submitted!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AmbulanceDetailsPage;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useRef, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { ambulanceData } from './Ambulancedata';\r\n// import './AmbulanceDetailsPage.css';\r\n\r\n// const AmbulanceDetailsPage = () => {\r\n//   const { ambulanceId } = useParams();\r\n//   const ambulance = ambulanceData.find((a) => a.id === parseInt(ambulanceId));\r\n//   const [bookingSuccess, setBookingSuccess] = useState(false);\r\n//   const [showMap, setShowMap] = useState(false);\r\n//   const [destination, setDestination] = useState(null); // Store destination address\r\n//   const mapRef = useRef(null); // Reference to the map element\r\n\r\n//   useEffect(() => {\r\n//     if (showMap && destination) {\r\n//       initMap();\r\n//     }\r\n//   }, [showMap, destination]);\r\n\r\n//   const initMap = () => {\r\n//     const directionsService = new google.maps.DirectionsService();\r\n//     const directionsRenderer = new google.maps.DirectionsRenderer();\r\n    \r\n//     // Map initialization\r\n//     const map = new google.maps.Map(mapRef.current, {\r\n//       center: { lat: 12.9716, lng: 77.5946 }, // Default to Bangalore, change as needed\r\n//       zoom: 12,\r\n//     });\r\n//     directionsRenderer.setMap(map);\r\n\r\n//     // Dummy ambulance starting location\r\n//     const ambulanceStart = new google.maps.LatLng(12.9716, 77.5946);\r\n\r\n//     // Destination location based on user input (from form)\r\n//     const destinationLatLng = new google.maps.LatLng(destination.lat, destination.lng);\r\n\r\n//     // Create marker for ambulance location\r\n//     const ambulanceMarker = new google.maps.Marker({\r\n//       position: ambulanceStart,\r\n//       map: map,\r\n//       title: 'Ambulance Location',\r\n//       icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png', // Change this to any icon URL\r\n//     });\r\n\r\n//     // Request directions to the destination\r\n//     directionsService.route(\r\n//       {\r\n//         origin: ambulanceStart,\r\n//         destination: destinationLatLng,\r\n//         travelMode: google.maps.TravelMode.DRIVING,\r\n//       },\r\n//       (result, status) => {\r\n//         if (status === google.maps.DirectionsStatus.OK) {\r\n//           directionsRenderer.setDirections(result);\r\n//         } else {\r\n//           alert('Directions request failed due to ' + status);\r\n//         }\r\n//       }\r\n//     );\r\n\r\n//     // Simulate ambulance moving (use some interval here)\r\n//     let currentPosition = ambulanceStart;\r\n//     let interval = setInterval(() => {\r\n//       if (currentPosition.lat() < destinationLatLng.lat()) {\r\n//         currentPosition = new google.maps.LatLng(\r\n//           currentPosition.lat() + 0.0001,\r\n//           currentPosition.lng()\r\n//         );\r\n//         ambulanceMarker.setPosition(currentPosition);\r\n//       } else {\r\n//         clearInterval(interval); // Stop moving once the destination is reached\r\n//       }\r\n//     }, 1000); // Update position every second\r\n//   };\r\n\r\n//   const handleBookingSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     setBookingSuccess(true);\r\n//     setTimeout(() => {\r\n//       setBookingSuccess(false);\r\n//     }, 3000); // Show alert for 3 seconds\r\n//   };\r\n\r\n//   const handleTrackButtonClick = () => {\r\n//     // Simulating destination from user input (this could come from form fields)\r\n//     setDestination({ lat: 12.9716, lng: 77.6356 }); // Example coordinates for destination\r\n//     setShowMap(true); // Show map on track button click\r\n//   };\r\n\r\n//   if (!ambulance) {\r\n//     return <h1>Ambulance not found!</h1>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"ambulance-details-page\">\r\n//       <h1 className=\"ambulance-name\">{ambulance.name}</h1>\r\n\r\n//       {/* Ambulance Images */}\r\n//       <div className=\"ambulance-images\">\r\n//         <img\r\n//           src={ambulance.image1}\r\n//           alt={`${ambulance.name} view 1`}\r\n//           className=\"ambulance-image\"\r\n//         />\r\n//         <img\r\n//           src={ambulance.image2}\r\n//           alt={`${ambulance.name} view 2`}\r\n//           className=\"ambulance-image\"\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Ambulance Info */}\r\n//       <p className=\"ambulance-contact\">\r\n//         <strong>Contact:</strong> {ambulance.contact}\r\n//       </p>\r\n//       <p className=\"ambulance-location\">\r\n//         <strong>Location:</strong> {ambulance.location}\r\n//       </p>\r\n\r\n//       <h2 className=\"section-heading\">Facilities</h2>\r\n//       <ul className=\"ambulance-facilities\">\r\n//         <li>24/7 Availability</li>\r\n//         <li>Emergency Medical Assistance</li>\r\n//         <li>Equipped with Oxygen Cylinders</li>\r\n//         <li>First Aid Kits</li>\r\n//         <li>Basic and Advanced Life Support</li>\r\n//       </ul>\r\n\r\n//       {/* Booking Form */}\r\n//       <h2 className=\"section-heading\">Book Ambulance</h2>\r\n//       <form\r\n//         className=\"booking-form\"\r\n//         onSubmit={handleBookingSubmit}\r\n//       >\r\n//         <label>\r\n//           Name:\r\n//           <input type=\"text\" required />\r\n//         </label>\r\n//         <label>\r\n//           Contact:\r\n//           <input type=\"text\" required />\r\n//         </label>\r\n//         <label>\r\n//           Address:\r\n//           <input type=\"text\" required />\r\n//         </label>\r\n//         <button type=\"submit\">Submit</button>\r\n\r\n//         {/* Track Ambulance Location Button */}\r\n//         <button\r\n//           type=\"button\"\r\n//           className=\"track-location-button\"\r\n//           onClick={handleTrackButtonClick} // Trigger map and marker movement\r\n//         >\r\n//           Track Ambulance\r\n//         </button>\r\n//       </form>\r\n\r\n//       {/* Map Preview */}\r\n//       {showMap && (\r\n//         <div className=\"map-preview\">\r\n//           <h3>Ambulance Location</h3>\r\n//           <div ref={mapRef} className=\"map-container\" style={{ width: '100%', height: '300px' }}></div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Success Alert */}\r\n//       {bookingSuccess && (\r\n//         <div className=\"alert\">Ambulance service request submitted!</div>\r\n//       )}\r\n//     </div>\r\n//   );z\r\n// };\r\n\r\n// export default AmbulanceDetailsPage;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}